openapi: 3.0.2
info:
  title: Layout API Specs
  description: Bare Bones API Specification for Layout Parser
  version: '0.1'
paths:
  /v0.1/auth/login:
    post:
      tags:
        - Auth
      summary: Login
      operationId: login_v0_1_auth_login_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_login_v0_1_auth_login_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v0.1/auth/logout:
    post:
      tags:
        - Auth
      summary: Logout User
      description: Endpoint for logging out the user
      operationId: logout_user_v0_1_auth_logout_post
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - OAuth2PasswordBearer: []
  /v0.1/users/me:
    get:
      tags:
        - Auth
      summary: Get Users
      description: Get the details of the currently logged in user
      operationId: get_users_v0_1_users_me_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - OAuth2PasswordBearer: []
    patch:
      tags:
        - Auth
      summary: Update Users
      description: Update the user details for current user.
      operationId: update_users_v0_1_users_me_patch
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - OAuth2PasswordBearer: []
  /v0.1/preprocess/binarize:
    post:
      tags:
        - Preprocess
      summary: Binarize Image
      description: Returns the binarized image
      operationId: binarize_image_v0_1_preprocess_binarize_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_binarize_image_v0_1_preprocess_binarize_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /v0.1/preprocess/grayscale:
    post:
      tags:
        - Preprocess
      summary: Grayscale Image
      description: Returns the grayscale image using opencv BGR2GRAY function
      operationId: grayscale_image_v0_1_preprocess_grayscale_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_grayscale_image_v0_1_preprocess_grayscale_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /v0.1/preprocess/color:
    post:
      tags:
        - Preprocess
      summary: Get Image Colors
      description: Detect and returns the Foreground and Background color of the image.
      operationId: get_image_colors_v0_1_preprocess_color_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_get_image_colors_v0_1_preprocess_color_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /v0.1/preprocess/font:
    post:
      tags:
        - Preprocess
      summary: Get font properties in the Image
      description: DGet font information such as font name, font style, bold or not?, etc.,
      operationId: get_image_fonts_v0_1_preprocess_language_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_get_image_font_v0_1_preprocess_language_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /v0.1/preprocess/properties:
    post:
      tags:
        - Preprocess
      summary: Get Image Properties
      description:  high level general properties of the page like weather the page is 1-column, 2-column, or multi-column? Whether the document contains images, tables, etc.
      operationId: get_image_properties_v0_1_preprocess_properties_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_get_image_propeties_v0_1_preprocess_properties_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /v0.1/layout:
    post:
      tags:
        - Main
      summary: Perform Layout Parsing
      description: |-
        Main function that performs the Layout Parser.

        @inputs: List of uploaded images
        @outputs: Dict with the key as the name of the image and value as another dict of Layout blocks containing hierarchical layout information in json format like page contains 3 blocks with bbox, each block contains 8 lines with bbox, each line contains 12 words with individual word bbox. Special elements like image, tables, etc. are tagged and labeled separately
      operationId: perform_layout_v0_1
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_perform_ocr_v0_1'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /v0.1/post:
    post:
      tags:
        - Postprocess
      summary: Post Processing
      description: This is a dummy endpoint to make space for the Postprocess group
      operationId: post_processing_v0_1_post_post
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - OAuth2PasswordBearer: []
  /v0.1/viz:
    post:
      tags:
        - Visualization
      summary: Visualization
      description: This is a dummy endpoint to make space for the Visualization group
      operationId: visualization_v0_1_viz_post
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - OAuth2PasswordBearer: []
  /v0.1/metric:
    post:
      tags:
        - Metric
      summary: Calculate Metric
      description: This is a dummy endpoint to make space for the Metric group
      operationId: calculate_metric_v0_1_metric_post
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - OAuth2PasswordBearer: []
components:
  schemas:
    Body_binarize_image_v0_1_preprocess_binarize_post:
      title: Body_binarize_image_v0_1_preprocess_binarize_post
      required:
        - image
      type: object
      properties:
        image:
          title: Image
          type: string
          format: binary
    Body_get_image_colors_v0_1_preprocess_color_post:
      title: Body_get_image_colors_v0_1_preprocess_color_post
      required:
        - image
      type: object
      properties:
        image:
          title: Image
          type: string
          format: binary
    Body_get_image_fonts_v0_1_preprocess_font_post:
      title: Body_get_image_fonts_v0_1_preprocess_font_post
      required:
        - image
      type: object
      properties:
        image:
          title: Image
          type: string
          format: binary
    Body_get_image_languages_v0_1_preprocess_language_post:
      title: Body_get_image_languages_v0_1_preprocess_language_post
      required:
        - image
      type: object
      properties:
        image:
          title: Image
          type: string
          format: binary
    Body_get_image_modalitys_v0_1_preprocess_modality_post:
      title: Body_get_image_modalitys_v0_1_preprocess_modality_post
      required:
        - image
      type: object
      properties:
        image:
          title: Image
          type: string
          format: binary
    Body_get_image_scripts_v0_1_preprocess_script_post:
      title: Body_get_image_scripts_v0_1_preprocess_script_post
      required:
        - image
      type: object
      properties:
        image:
          title: Image
          type: string
          format: binary
    Body_grayscale_image_v0_1_preprocess_grayscale_post:
      title: Body_grayscale_image_v0_1_preprocess_grayscale_post
      required:
        - image
      type: object
      properties:
        image:
          title: Image
          type: string
          format: binary
    Body_login_v0_1_auth_login_post:
      title: Body_login_v0_1_auth_login_post
      required:
        - username
        - password
      type: object
      properties:
        grant_type:
          title: Grant Type
          pattern: password
          type: string
        username:
          title: Username
          type: string
        password:
          title: Password
          type: string
        scope:
          title: Scope
          type: string
          default: ''
        client_id:
          title: Client Id
          type: string
        client_secret:
          title: Client Secret
          type: string
    Body_perform_ocr_v0_1_ocr_post:
      title: Body_perform_ocr_v0_1_ocr_post
      required:
        - images
      type: object
      properties:
        images:
          title: Images
          type: array
          items:
            type: string
            format: binary
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            type: string
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          scopes: {}
          tokenUrl: auth/login
